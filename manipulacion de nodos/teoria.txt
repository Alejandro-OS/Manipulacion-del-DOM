<h4>Ideas/conceptos claves</h4>
Critical Rendering Path Es el proceso que se encarga de convertir en pixeles el HTML, CSS y JS

El DOM arbol para el HTML que contiene toda nuestra estructura HTML

El CSSOM es el arbol para el CSS

<h4>Apuntes</h4>
Todos los navegadores los utilizan para trabajar en un sitio web
Todo comienza con el proceso llamado ‚ÄúCritical Rendering Path‚Äù
Se puede dividir en 5 partes
A lo largo del proceso el navegador crea dos arboles
DOM
Es una representaci√≥n del HTML
Estructura en forma de √°rbol de nodos
Es un modelo que puede ser modificado
CSSOM
dom.png
RESUMEN: Para mostrar un sitio hay un proceso llamado Critical Render Path en √©l se crean dos √°rboles el DOM y el
 CSSOM. El Dom sera aquel que se encargar√° de tener todo nuestro contenido en una representaci√≥n de arbol que 
 contendr√° nodos


 ¬øQu√© rayos son las API?

Puede parecernos un concepto muy abstracto o confuso al principio, ya que como dice el profesor ‚Äò‚Äôlo utilizamos sin discreci√≥n para referirnos a todo‚Äô‚Äô. Pero, en pocas palabras, una API es todo lo que sirva para comunicar f√°cilmente un pedazo de software con otro.

APIs de terceros
Twitter, por ejemplo, nos proporciona una manera sencilla de mostrar tweets de alg√∫n usuario a trav√©s de su API. Tan solo tenemos que hacer una petici√≥n GET al siguiente Endpoint:

GET https://api.twitter.com/2/users/:id/tweets

APIs de servicios
Si quisieramos mostrar mapas de Google Maps, tambien podriamos hacerlo a trav√©s de su API.

Por ejemplo, para mostrar la ubicaci√≥n de Sydney, New South Wales, Australia, lo har√≠amos de la siguiente manera:

function initMap() {
  map = new google.maps.Map(document.getElementById("map"), {
    center: { lat: -34.397, lng: 150.644 },
    zoom: 8,
  });
}
Conclusi√≥n
Si prestamos atenci√≥n, nos damos cuenta de que son una manera sencilla de acceder a informaci√≥n o funcionalidades de otro pedazo de c√≥digo. Es por eso que se les llama ‚Äò‚Äôintermediarios‚Äô‚Äô o ‚Äò‚Äôpuentes‚Äô‚Äô.

############ biblia del dasarrollo web ################

developer.mozilla.org
caniuse.com

#######################################################

B√°sicamente tenemos 4 formas de leer nodos con JS:
.
.

parent.getElementById(‚Äòid‚Äô) => nos permite obtener un elemento a trav√©s de su id.
.
parent.getElementsByClassName(‚Äòclass‚Äô) => obtiene un array con todos los elementos hijos que tengan esa clase, ojo ‚ÄúgetElementByClassName‚Äù no existe, es decir no podremos obtener solo 1 elemento con esa clase.
.
parent.getElementsByTagName(‚Äòdiv‚Äô) => con este m√©todo obtenemos una lista o ‚Äúarray list‚Äù con todos los elementos que tengan esa etiqueta, ejemplo todos los divs. Al igual que con el m√©todo anterior no hay posibilidad de usarlo en singular, siempre tendremos que usar getElements
.
parent.querySelector() => nos permite buscar de 3 formas, con id, clase o tagName. A diferencia de los 2 anteriores este nos devuelve 1 solo elemento, el primero que contenga el valor que se le paso. Id => (‚Äô#id‚Äô), class => (‚Äô.class‚Äô), tagName (‚Äòdiv‚Äô)
.
parent.querySelectorAll() => este m√©todo retorna una array list con todos los elementos que tengan ese selector (id, class o tagName)
.
Casi siempre el elemento ‚Äúpadre o parent‚Äù es document. ya que estamos haciendo referencia a todo el DOM, todo el documento y esto en ciertos casos nos permite evitar errores.
ejemplo = const button = document.querySelector(‚Äô#button)

La diferencia entre NodeList y Array, es que el NodeList carece de m√©todos que si est√°n disponibles en los Arrays, pero podemos pasar esto f√°cilmente usando el operador de propagaci√≥n.

// De esta forma pasamos todos los elementos en el NodeList a un arreglo al cual si podremos usar los m√©todos filter, map, reduce entre otros. 
const nodeList = document.querySelectorAll("selector css");
const elementList = [...nodeList];

Recomendaci√≥n importante cada vez que obtengamos un NodeList p√°semelo a Array ya que los motores de javascript como el motor V8 de google est√°n mas optimizados para Arrays que para NodeList.

########## AGREGAR NODOS ###################

Al decir ‚Äúcrear nodos‚Äù nos referimos a crear elementos dentro de nuestro DOM. Para ello podemos hacer uso de:

---createElement: Para crear una etiqueta HTML:

// Solo se ha creado, a√∫n no se agrega al DOM
const etiquetaH1 = document.createElement("h1")

---createTextNode: Para crear un texto:

// Solo se ha creado, a√∫n no se agrega al DOM
const texto = document.createTextNode("¬°Hola, Mundo!")

Como solo creamos, necesitamos formas de agregarlos al DOM, para ello, JavaScript nos provee de estas formas:

---parentElement.appendChild(): Agrega un hijo al final alg√∫n elemento

// Obtengo el elemento padre
const parentElement = document.querySelector("selector")
// Creo el nodo a insertar
const h3 = document.createElement("h3")
// Creo el texto del nodo
const texto = document.createTextNode("Hola!")
// Inserto el texto al nodo
h3.appendChild(h3)
// Inserto el nodo al padre
parentElement.appendChild(h3)


---parentElement.append(): Es la evoluci√≥n de appendChild, podemos agregar m√°s de un nodo, puedes agregar texto y‚Ä¶ no es soportado por Internet Explorer ¬¨¬¨!

-Un polyfill es una adaptaci√≥n del c√≥digo para dar soporte a navegadores que no lo soportan, aqu√≠ est√° el polyfill de append:
https://developer.mozilla.org/es/docs/Web/API/ParentNode/append#polyfill

// Obtengo el elemento padre
const parentElement = document.querySelector("selector")
// Agrego al elemento padre
parentElement.append("agrego un texto", document.createElement("div"))


---parentElement.insertBefore(): Inserta nodos antes del elemento que le pasemos como referencia, este nodo de referencia tiene que ser un hijo DIRECTO del padre

// Obtengo el elemento padre
const parentElement = document.querySelector("selector")
// Creo un elemento
const titulo = document.createElement("h1")
// Obtengo la referencia del elemento del que quiero insertar antes:
const referencia = document.querySelector("selector")
// ¬°Lo insertamos!
parentElement.insertBefore(titulo, referencia)


---parentElement.insertAdjacentElement(): Inserta nodos seg√∫n las opciones que le pasemos:

1-beforebegin: Lo inserta antes del nodo
2-afterbegin: Lo inserta despues del nodo
3-beforeend: Lo inserta antes de donde finaliza el nodo
4-afterend: Lo inserta despu√©s de donde finaliza el nodo

// Obtengo el elemento padre
const parentElement = document.querySelector("selector")
// Creo un elemento
const nodo = document.createElement("span")
parentElement.insertAdjacentElement("beforebegin", nodo)

Existen otras formas de agregar nodos:

-node.outerHTML: Sirve para leer HTML para leer HTML
-node.innerHTML: Sirve para escribir HTML

PEEEEEEERO, tienen un problema de seguridad üëÄ‚òùÔ∏è

hack: Cuando en el inspector de elementos seleccionas un elemento y en la consola escribes $0, este te devolver√° el elemento tal como si lo hubieses seleccionado con document.querySelector().

Aqu√≠ les dejo el playground que us√≥ el profesor para hacer las pruebas:
https://codepen.io/jonalvarezz/pen/OJXeNab?editors=0110

El problema con estas formas de inserciones es que permiten la inserci√≥n XSS, es decir, c√≥digo maligno, y cualquier usuario programador malicioso podr√≠a meter scripts molestos,
imagina que cada que un usuario llegue a tu p√°gina le salga un alert‚Ä¶ ¬°Ser√≠a catastr√≥fico! Siempre sanitiza (remover caracteres especiales) los inputs de tus usuarios

########## ATRIBUTOS Y PROPIEDADES #############

B√°sicamente un atributo es el estado inicial en nuestro HTML, es HTML solo podemos escribir atributos porque es el estado inicial con el que se renderizan
y una propiedad es la variable que podemos cambiar a lo largo de la ejecuci√≥n del programa mediante JavaScript, es decir, podemos acceder a dichos atributos y cambiarlo,
haciendo que sean propiedades, aqu√≠ un poco m√°s de informaci√≥n sobre ello.

Lo genial de JavaScript es que podemos cambiarlas de forma din√°mica. Recordemos que JavaScript son en su mayor√≠a objetos, por lo que los nodos HTML dentro de JavaScript son representados como objetos.
Teniendo eso en cuenta, podemos acceder a cualquier atributo de dichos nodos desde HTML y cambiar sis propiedades, por ejemplo:

// Al seleccionar el nodo HTML, JavaScript lo convierte en un objeto!
const input = document.querySelector("input")

// Y of course, podemos modificarlo como cualquier otro objeto de JavaScript:
input.placeholder = "Escribe algo"
input.value = 2
input.type = "number"

############## ELIMINAR NODOS ####################

<h4>Apuntes</h4>
Existen 3 formas de eliminar nodos en el DOM
Remove Child

Podemos eliminar un nodo seg√∫n a un m√©todo que proviene del padre y pasamos la referencia a eliminar
padre.removeChild(nodoAEliminar)
Remove

Es la evoluci√≥n de remove child
No esta soportado en internet explorer
nodoAEliminar.remove()
Replace Child

Nos permite remplazar un nodo
padre.replaceChild(nuevoNodo, aRemplazar)
RESUMEN: Podemos eliminar nodos con diferentes m√©todos que nos provee el DOM como ser removeChild, el cual necesita la referencia del padre a eliminar y del nodo que se eliminara,
remove el cual se encarga de eliminar el nodo solo con la referencia deseada a borrar y finalmente replaceChild que nos ayuda remplazar un elemento con las referencias del padre,
el nuevo nodo y el elemento a remplazar

################# OPERACIONES EN LOTE #########################3

las operaciones sobre el DOM cuestan eficiencia a API por eso entre menos operaciones se hagan mejor
